upstream thin {
    server 127.0.0.1:3000;
    server 127.0.0.1:3001;
    keepalive 64;
}

server {
    listen 80;
    listen 443 ssl;
 
    ssl_certificate <%= node[:nginx][:ssl_cert_dir] %>/<%= node[:sys][:name] %>_cert.pem;
    ssl_certificate_key <%= node[:nginx][:ssl_key_dir]%>/<%= node[:sys][:name] %>_key.pem;
    ssl_protocols        SSLv3 TLSv1;
    ssl_ciphers HIGH:!aNULL:!MD5;
    
    server_name <%= node[:sys][:name] %>.local;
    root /srv/www/blog/public;
 
    error_log /var/log/nginx/<%= node[:sys][:name] %>.error.log;
    access_log /var/log/nginx/<%= node[:sys][:name] %>.access.log;
 
    # pass the request to the node server
    location / {
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host              $http_host;
        proxy_redirect false;
        proxy_max_temp_file_size 0;

        # If the file exists as a static file serve it directly without
        # running all the other rewite tests on it
        if (-f $request_filename) { 
            break; 
        }

        # check for index.html for directory index
        # if its there on the filesystem then rewite 
        # the url to add /index.html to the end of it
        # and then break to send it to the next config rules.
        if (-f $request_filename/index.html) {
            rewrite (.*) $1/index.html break;
        }

        # this is the meat of the rails page caching config
        # it adds .html to the end of the url and then checks
        # the filesystem for that file. If it exists, then we
        # rewite the url to have explicit .html on the end 
        # and then send it on its way to the next config rule.
        # if there is no file on the fs then it sets all the 
        # necessary headers and proxies to our upstream mongrels
        if (-f $request_filename.html) {
            rewrite (.*) $1.html break;
        }

        if (!-f $request_filename) {
            proxy_pass http://thin;
            break;
        }
    }
}
